/*
 * SplashPanel.java
 *
 * Created on 27 de octubre de 2008, 07:09 PM
 */
package com.pmarlen.client.view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.font.FontRenderContext;
import java.awt.font.TextAttribute;
import java.awt.font.TextLayout;
import java.awt.geom.AffineTransform;
import java.io.IOException;
import java.text.AttributedCharacterIterator;
import java.text.AttributedString;
import javax.imageio.ImageIO;

/**
 *
 * @author  alfred
 */
public class SplashPanel extends javax.swing.JPanel {

    Image back;
    private int loadPerc;
    private String versionApp;
    private String msgProgress;

    /** Creates new form SplashPanel */
    public SplashPanel(String versionApp) {
        initComponents();
        try {
            back = ImageIO.read(getClass().getResourceAsStream("/imgs/splash_2.jpg"));
            setPreferredSize(new java.awt.Dimension(back.getWidth(this), back.getHeight(this)));
            this.versionApp = "Ver. "+versionApp;
            this.setFont(new Font("Verdana", Font.BOLD, 24));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        this.loadPerc = 0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(450, 360));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 712, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D)g;

        g.setColor(Color.BLACK);
        g.fillRect(0, 0, getWidth(),getHeight());
        
        if(back!=null){
            g.drawImage(back, 0, 0, null);
        }


        RenderingHints renderHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
        renderHints.put(RenderingHints.KEY_RENDERING,
                     RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHints(renderHints);

        FontRenderContext frc = g2d.getFontRenderContext();
        Font f0  = new Font("Verdana",Font.PLAIN,12);
        Font f  = new Font("Verdana",Font.PLAIN,10);
        Font f1 = new Font("Verdana",Font.BOLD ,14);
        
        AttributedString as = new AttributedString(versionApp);
        as.addAttribute(TextAttribute.FONT, f, 0, 5 );
        as.addAttribute(TextAttribute.FONT, f1, 5, versionApp.length() );
        AttributedCharacterIterator aci = as.getIterator();
        TextLayout tl = new TextLayout (aci, frc);
        float sw = (float) tl.getBounds().getWidth();
        float sh = (float) tl.getBounds().getHeight();
        Shape sha = tl.getOutline(AffineTransform.
                getTranslateInstance(getWidth()-130, getHeight()-42));

        g2d.setColor(Color.WHITE);
        g2d.fill(sha);
        g2d.setColor(Color.BLUE);
        g2d.setStroke(new BasicStroke(0.5f));
        g2d.draw(sha);

                
        int relativePerc = (loadPerc*(getWidth()-20))/100;
        
        g2d.setColor(Color.ORANGE);
        g2d.fillRoundRect(10, getHeight()-20, relativePerc, 5, 2, 2);
        g2d.setColor(Color.BLUE);        
        g2d.drawRoundRect(10, getHeight()-20, relativePerc, 5, 2, 2);

        if(msgProgress!=null){
            g2d.setColor(Color.WHITE);
            g2d.setFont(f0);
            g2d.drawString(msgProgress, 10,getHeight()-35);
            
        }

    }

    public int getLoadPerc() {
        return loadPerc;
    }

    public void setLoadPerc(int loadPerc,boolean delay) {
        try{
            int c;
            for(c=this.loadPerc;c<=loadPerc;c++){
                this.loadPerc = c;
                repaint();                
                Thread.sleep(10 * (delay?10:1));
            }
        }
        catch(InterruptedException ie) {
            this.loadPerc = loadPerc;            
        }        
    }

    /**
     * @return the msgProgress
     */
    public String getMsgProgress() {
        return msgProgress;
    }

    /**
     * @param msgProgress the msgProgress to set
     */
    public void setMsgProgress(String msgProgress) {
        this.msgProgress = msgProgress;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
