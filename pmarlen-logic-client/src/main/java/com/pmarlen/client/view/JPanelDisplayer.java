/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelDisplayer.java
 *
 * Created on 31/05/2009, 08:12:55 PM
 */
package com.pmarlen.client.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author alfred
 */
public class JPanelDisplayer extends javax.swing.JPanel {
    private Logger logger;
    private Dimension lastStableDimension;
    private BufferedImage[] allImages;
    private Image[] allsScalledImages;
    private int imageSelected;
    public static final boolean showBackgroundGrid = false;

    /** Creates new form JPanelDisplayer */
    public JPanelDisplayer() {
        logger = LoggerFactory.getLogger(JPanelDisplayer.class);
        logger.debug("==>> constructor JPanelDisplayer()");
        initComponents();
        this.allImages = null;
        this.allsScalledImages = null;
        this.imageSelected = -1;
    }

    public void setAllImages(BufferedImage[] allImages) {
        logger.debug("==>> setAllImages: allImages="+allImages);
        
        this.allImages = allImages;
        this.allsScalledImages = new Image[this.allImages.length];
        this.imageSelected = 0;
        new Thread() {
            public void run() {
                createScalledImages();
            }
        }.start();
    }

    protected void createScalledImages() {
        logger.debug("===============>>>>>>> createScalledImages()");
        if (allsScalledImages == null || allsScalledImages.length == 0) {
            return;
        }
        if (lastStableDimension == null || !lastStableDimension.equals(getSize())) {
            lastStableDimension = getSize();
        }
        int minDim = Math.min(getWidth(), getHeight());

        logger.debug("==>> createScalledImages() : this.imageSelected="+this.imageSelected+", allsScalledImages[this.imageSelected]="+allsScalledImages[this.imageSelected]);
        
        allsScalledImages[this.imageSelected] = allImages[this.imageSelected].getScaledInstance(
                (int) Math.round(allImages[this.imageSelected].getWidth() * ((double) minDim / (double) allImages[this.imageSelected].getWidth())),
                (int) Math.round(allImages[this.imageSelected].getHeight() * ((double) minDim / (double) allImages[this.imageSelected].getHeight())),
                BufferedImage.SCALE_SMOOTH);
        repaint();

        for (int i = 0; i < allImages.length; i++) {
            if (i == this.imageSelected) {
                continue;
            }
            allsScalledImages[i] = allImages[i].getScaledInstance(
                    (int) Math.round(allImages[i].getWidth() * ((double) minDim / (double) allImages[i].getWidth())),
                    (int) Math.round(allImages[i].getHeight() * ((double) minDim / (double) allImages[i].getHeight())),
                    BufferedImage.SCALE_SMOOTH);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    long lastValidTimeResize = 0;
    
    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        long timeResized = System.currentTimeMillis();
        
        long dt = timeResized - lastValidTimeResize;
        lastValidTimeResize = timeResized;
        logger.debug("formComponentResized: but the JPanelDisplayer is fucking visible ?"+isVisible()+", TD="+dt+" ms.");
        if(dt > 1000){
            new Thread() {
                public void run() {
                    createScalledImages();
                }
            }.start();
        }
    }//GEN-LAST:event_formComponentResized

    @Override
    public void paint(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        paintBackground(g2d);
        paintImageForeground(g2d);
    }

    public void setImageSelected(int imageSelected) {
        this.imageSelected = imageSelected;
        repaint();
    }

    void paintBackground(Graphics2D g2d) {
        g2d.setColor(getBackground());
        g2d.fillRect(0, 0, getWidth(), getHeight());
        if (showBackgroundGrid) {
            g2d.setColor(Color.GREEN);
            for (int i = 0; i <= getWidth(); i += 10) {
                g2d.drawRect(i, 0, i, getHeight());
            }
            for (int i = 0; i <= getHeight(); i += 10) {
                g2d.drawRect(0, i, getWidth(), i);
            }
        }
    }

    void paintImageForeground(Graphics2D g2d) {
        if (allsScalledImages == null || allsScalledImages.length == 0 || allsScalledImages[this.imageSelected] == null) {
            return;
        }

        g2d.drawImage(allsScalledImages[this.imageSelected],
                (getWidth() - allsScalledImages[this.imageSelected].getWidth(null)) / 2,
                (getHeight() - allsScalledImages[this.imageSelected].getHeight(null)) / 2,
                null);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
